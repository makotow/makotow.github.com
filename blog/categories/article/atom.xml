<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: article | Faster and Faster]]></title>
  <link href="http://makotow.github.io/blog/categories/article/atom.xml" rel="self"/>
  <link href="http://makotow.github.io/"/>
  <updated>2014-12-07T01:52:27+09:00</updated>
  <id>http://makotow.github.io/</id>
  <author>
    <name><![CDATA[Makoto WATANABE (makotow)]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[新しいブログを作った件]]></title>
    <link href="http://makotow.github.io/blog/2014/12/07/starting-new-blog/"/>
    <updated>2014-12-07T00:55:00+09:00</updated>
    <id>http://makotow.github.io/blog/2014/12/07/starting-new-blog</id>
    <content type="html"><![CDATA[<p>前回のエントリからしばらくたったけど、
新しいブログを作ってみました。</p>

<p>今回は新しく作ったブログのテクノロジ周りを照会したいと思います。</p>

<h2 id="tldr">TL;DR</h2>

<p>Ghostの環境をAWSに作ったらたくさん新しいテクノロジーの勉強ができてできることが増えた。</p>

<!-- more -->

<h2> Contents </h2>
<ul id="markdown-toc">
  <li><a href="#tldr">TL;DR</a></li>
  <li><a href="#section">ブログプラットフォーム</a></li>
  <li><a href="#section-1">サーバ環境</a></li>
  <li><a href="#nodejs">Nodejs</a></li>
  <li><a href="#ubuntu">Ubuntu</a></li>
  <li><a href="#vagrant">Vagrant</a>    <ul>
      <li><a href="#multivm-">MultiVM 機能</a></li>
      <li><a href="#provisioning">Provisioning</a></li>
      <li><a href="#plugin">plugin</a></li>
    </ul>
  </li>
  <li><a href="#section-2">テスト</a>    <ul>
      <li><a href="#serverspec">ServerSpec</a></li>
    </ul>
  </li>
  <li><a href="#section-3">その他</a></li>
</ul>

<p>新しいブログはこちらのURLです。</p>

<ul>
  <li><a href="http://blog.amakotow.com">makotow’s blog</a></li>
</ul>

<h2 id="section">ブログプラットフォーム</h2>

<p>予定していたとおり <a href="https://ghost.org/">Ghost</a>を使うようにしてみた。
見た目のシンプルさと綺麗さに惹かれました。</p>

<p>Octopressでも良いのだけど、日本語周りでエラーになってパブリッシュできないことや、
リリースバージョンにタグがなかったり（masterが最新）という状態でメンテナンスがしづらいなどなどあって乗り換えを検討。</p>

<p>こちらはこちらで残し、うまい棲み分けを考えていきます。</p>

<h2 id="section-1">サーバ環境</h2>

<p>AWSを使っています。
Digital Ocean も選択肢として考えましたが結果的にはAWSとなりました。
理由としてはAWSの各種サービスを使ってみたかったというのと、
現在無料期間中ということが大きな理由です。</p>

<p>AWSで構築した場合、主に以下のサービスを使用しています。
ブログのドメインはムームードメインで取得したものをRoute53でホストしています。</p>

<ul>
  <li>EC2</li>
  <li>Route53</li>
  <li>VPC</li>
  <li>EIP</li>
  <li>etc</li>
</ul>

<h2 id="nodejs">Nodejs</h2>

<p>GhostはNode.jsで動作しています。</p>

<p>Node.jsのプロセスをバックグラウンドで動作させるため
forever, supervisor, pm2, upstart, /etc/init でデーモン化を検討しました。
やりたいことをシンプルに実現できたため、今回はforeverを使用しました。</p>

<p>pm2 のほうがクラスタリングなどの機能があり高機能のようです。
foreverでまかないきれなくなったらpm2も検討する予定。</p>

<h2 id="ubuntu">Ubuntu</h2>

<p>OS は Ubuntu を使用。
AWS使うならAmazon Linuxを使うのがいいと考えてやってました。<br />
テスト時にAmazon Linuxをローカル使う方法がわからなかったのでCentOSかUbuntu2択で
AMIの関係上Ubuntuを選びました。</p>

<h2 id="vagrant">Vagrant</h2>

<p>今回はAWSに構築する前にローカルでテストして、ある程度形になったらAWSへデプロイしました。
テクノロジーとしてVagrantを使用しました。</p>

<h3 id="multivm-">MultiVM 機能</h3>

<p>これが使いたかったVagrantを使った。<br />
vagrant upコマンドの引数で環境ごとにprovisioningとかできる。</p>

<ul>
  <li>vagrnat up remote – AWSにデプロイ</li>
  <li>vagrnat up local  – ローカル環境にデプロイ</li>
</ul>

<p>OSのインストールからすると up に結構時間かかった。<br />
Dockerでやったら時間がかからずに起動できるのかなと思います。</p>

<h3 id="provisioning">Provisioning</h3>

<p>OS起動後に自動プロビジョニングは、今回はshell scriptを使用しました。  </p>

<p>本当は chef, ansibleでやりたかったが環境構築ばかりに時間がかかってしまうのでは
本末転倒と思い最速でできるshell script を使用しました。</p>

<p>chef, ansible版は作ってみようと思います。</p>

<h3 id="plugin">plugin</h3>

<p>いま見ると開発時のプラグインは以下のものを入れていたようで、個人的にはhostsupdaterがとても便利でした。<br />
Vagrantを起動するとhostsファイルに追加してくれる。</p>

<ul>
  <li>vagrant-aws (0.5.0)</li>
  <li>vagrant-digitalocean (0.7.0)</li>
  <li>vagrant-hostsupdater (0.0.11)</li>
  <li>vagrant-login (1.0.1, system)</li>
  <li>vagrant-omnibus (1.4.1)</li>
  <li>vagrant-share (1.1.2, system)</li>
</ul>

<h2 id="section-2">テスト</h2>

<p>他にも技術的なチャレンジとしてVagrantで自動構築したものに対して
テストすることにもチャレンジしてみました。</p>

<h3 id="serverspec">ServerSpec</h3>

<p>rake のタスクとして spec を作成</p>

<pre><code>rake spec
</code></pre>

<p>を実行してテストを走らせながらすすめ、テストのリズム、感触をつかむことが出来ました。</p>

<h2 id="section-3">その他</h2>

<p>ドメインの取得やらを行って、DNSの仕組みなどもやもやしてたものがなんとなく理解できました。
せっかくなのでもっと体系的に学べるといいなと思いました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ブログプラットフォームの変更を考えている。]]></title>
    <link href="http://makotow.github.io/blog/2014/09/02/move-to-ghost/"/>
    <updated>2014-09-02T01:29:00+09:00</updated>
    <id>http://makotow.github.io/blog/2014/09/02/move-to-ghost</id>
    <content type="html"><![CDATA[<p>octopressから別のプラットフォームへの移行を考えている。</p>

<p>今のところ候補なのはghost。</p>

<p>つらつらと思っていることを書いていく。</p>

<h2 id="section">ブログプラットフォームの移行</h2>

<p>octopressでもいいのだけど、飽きてきたのとghostを見た時の洗練されたデザインに一目惚れ。</p>

<p>また、ghost出たばかりの頃はまだいいかなと思ってたけど、最近見てみたらいい感じになってた。</p>

<p>他にも候補としてはhugo,middlemanなど検討したけどもghostが一番面倒が少なさそう。</p>

<h3 id="section-1">テーマの変更</h3>

<p>ぱっと見素敵なテーマはたくさんあるのだけども、
以下のものは足りないかなと思っている。</p>

<ul>
  <li>コメント(ほぼつかわないけど…、様式美として)</li>
  <li>Recent Entry</li>
  <li>twitter, githubとかのガジェット？（シンプルなghostがごちゃごちゃしてしまうかもしれない。）</li>
  <li>about me</li>
  <li>octopress からの記事移行</li>
  <li>octopress のこれからの運用（tech memoメイン？）</li>
  <li>etc</li>
</ul>

<h2 id="aws-ordigital-ocean">AWS or　Digital Ocean?</h2>

<p>ghostに移行するとなった場合、node.jsが使える環境が必要になるので
上記の、クラウドプラットフォーム、VPSを使う必要がでてくる。</p>

<p>ghost 本家のドキュメントではDigital Oceanはghostのインストーラを用意しているらしい。</p>

<p>AWSはEC２とEIPがあればそれとなく使える気がするし、少しは勘があるのでいいかなと思っている。</p>

<h2 id="chef-terraform-capistrano-ansible-">Chef, Terraform, Capistrano, Ansible などなど</h2>

<p>せっかくなので上記のインフラ自動化ツールを導入してみたい。 
Immutable Infrastructure　の考え方を取り込んで環境構築をしたい。  </p>

<h3 id="circle-ci-travis-">Circle CI, travis とか</h3>

<p>github にプッシュすると自動でCIが走って、
ある一定の条件を満たすと記事公開とか。</p>

<h2 id="section-2">ドメイン名の取得</h2>

<p>ドメインの取得初めてのなので学ぶ。</p>

<p>今のところ候補はこんな感じ</p>

<ul>
  <li>makotow-tech-blog.com</li>
  <li>makotow-tech-blog.info</li>
  <li>blog.makotow.com</li>
</ul>

<p>普通はどんな感じでつけるのかよくわからなかった。
独自ドメインの人は代替こんな感じ。</p>

<h2 id="section-3">課題はたくさんある。</h2>

<p>つらつらとやってみたいことを書いてみた。<br />
やらないといけないことはたくさんあるので
とりあえずはホスティング先とローカルでのテーマの作成をやってみる。</p>
]]></content>
  </entry>
  
</feed>
