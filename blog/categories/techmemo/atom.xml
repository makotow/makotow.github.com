<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: TechMemo | Software Technology Memorandum and thoughts]]></title>
  <link href="http://makotow.github.io/blog/categories/techmemo/atom.xml" rel="self"/>
  <link href="http://makotow.github.io/"/>
  <updated>2014-01-01T23:40:49+09:00</updated>
  <id>http://makotow.github.io/</id>
  <author>
    <name><![CDATA[Makoto WATANABE (makotow)]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[man の使い方]]></title>
    <link href="http://makotow.github.io/blog/2013/11/28/how-to-use-man/"/>
    <updated>2013-11-28T23:48:00+09:00</updated>
    <id>http://makotow.github.io/blog/2013/11/28/how-to-use-man</id>
    <content type="html"><![CDATA[<p>man の使い方を調べたのでメモ。
主にオプションについて。
<!-- more --></p>

<h2> Contents </h2>
<ul id="markdown-toc">
  <li><a href="#section">基本</a></li>
  <li><a href="#man-section">man 見た時のsection番号について</a></li>
  <li><a href="#section-1">特定の章を読む</a></li>
  <li><a href="#section-2">キーワードで検索したい場合</a></li>
  <li><a href="#section-3">参考</a></li>
</ul>

<h2 id="section">基本</h2>

<p>基本の使い方
調べたいコマンドを引数に指定</p>

<pre><code>% man ls
</code></pre>

<h2 id="man-section">man 見た時のsection番号について</h2>

<p>いつも調べても忘れてしまうのでメモ
個人用途では、3, 7, 8くらいは使う。</p>

<ul>
  <li>1章 汎用コマンド</li>
  <li>2章 システムコール</li>
  <li>3章 ライブラリ関数、特に標準Cライブラリ関数</li>
  <li>4章 特殊なファイル（主に /dev にあるデバイス）とドライバ</li>
  <li>5章 ファイル形式とその使用法</li>
  <li>6章 ゲームとスクリーンセーバー</li>
  <li>7章 その他</li>
  <li>8章 システム管理コマンドとデーモン</li>
</ul>

<h2 id="section-1">特定の章を読む</h2>

<pre><code>% man 3 ls
</code></pre>

<p>章番号を指定する</p>

<h2 id="section-2">キーワードで検索したい場合</h2>

<pre><code>man -k keyword
</code></pre>

<h2 id="section-3">参考</h2>

<p>man の man を読むと、結構な量のオプションが出てくる。
man -k オプションは aproposコマンドと同様の結果とか初めて知った。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MacでKindleを読む]]></title>
    <link href="http://makotow.github.io/blog/2013/11/06/kindle-on-mac/"/>
    <updated>2013-11-06T00:54:00+09:00</updated>
    <id>http://makotow.github.io/blog/2013/11/06/kindle-on-mac</id>
    <content type="html"><![CDATA[<p>下書きしてから１ヶ月放置してたけどせっかくなので公開します。</p>

<p>KindleのMacアプリはamazon.comのものしか読めないので、
アカウント統合を行うことで読めるようになるのだけども、
直接電話したりでめんどくさいので放置してた。</p>

<p>結果的にはAndroidエミュレータをインストールして、
そこにKindleアプリを入れて読むことにした。</p>

<!-- more -->

<h2> Contents </h2>
<ul id="markdown-toc">
  <li><a href="#section">動機</a></li>
  <li><a href="#section-1">導入</a></li>
  <li><a href="#section-2">仮想デバイスの作成</a></li>
  <li><a href="#section-3">起動</a></li>
  <li><a href="#section-4">類似アプリ</a></li>
</ul>

<h2 id="section">動機</h2>

<p>なんとなくAndroidエミュレータを入れて読めばいいんじゃないかとわかってから初めてみたが、
標準のAndroidSDKでは遅くて使い物にならなかかったかつPlayストアが入っていなかったりでかなり苦戦した。</p>

<h2 id="section-1">導入</h2>

<p>Genymotion を導入する。
本家サイトからダウンロードしてインストール。特に迷うところはない。</p>

<p>本家: http://www.genymotion.com/</p>

<p>ダウンロードするにはアカウントが必要なので作成する。仮想デバイスを作成する際にも必要となる。
高速なエミュレータかつGoogleアプリが初期導入済みのデバイスを使用すれば最初からPlayストアが入っている。</p>

<p>(インストール時のバージョンは1.3.0)</p>

<p>GenymotionはVirtualBox上に仮想マシンを作成するためVirtualBoxを導入する。</p>

<h2 id="section-2">仮想デバイスの作成</h2>

<p>起動した画面から「Add」ボタンクリックすると認証ダイアログが出てくるので作成したアカウントを入力。</p>

<p><img src="/images/2013/11/Genymotion-Add.png">
<img src="/images/2013/11/Genymotion-Credential.png"></p>

<p>仮想デバイスの一覧が表示される。</p>

<p><img src="/images/2013/11/Create_a_new_virtual_device.png"></p>

<p>好きなデバイスを選んで作成する。
この時注意することは今回はPlayストアからKindleアプリをダウンロードして本を読むことが目標なので、</p>

<pre><code>xxxx - with GoogleApps
</code></pre>

<p>となっている仮想デバイスを選ぶこと。</p>

<p><img src="/images/2013/11/Virtual_device_creation_wizard_and_Create_a_new_virtual_device.png">
<img src="/images/2013/11/Virtual_device_creation_wizard.png"></p>

<p>Next-＞Nextとボタンを押してくと、
仮想デバイスのダウンロード、チェックが開始するのでしばらくまつ。</p>

<p><img src="/images/2013/11/Virtual_device_creation_wizard_and_Create_a_new_virtual_device_done.png"></p>

<p>ダウンロードが終わったら名前をつけて終了。</p>

<p><img src="/images/2013/11/Virtual_device_creation_wizard_and_Create_a_new_virtual_device_name.png">
<img src="/images/2013/11/Virtual_device_creation_wizard_and_Create_a_new_virtual_device_success.png"></p>

<h2 id="section-3">起動</h2>

<p>起動時の画面に行くと仮想デバイスリストにダウンロードしたデバイスが表示されているので、
選択して　▶Play をクリックでデバイスが起動する。</p>

<p>あとはAndroid端末と同じように使うことができる。</p>

<h2 id="section-4">類似アプリ</h2>

<p>他にも次のような類似のものがあったが、
私の環境ではうまく動いてくれなかった。</p>

<ul>
  <li>BlueStacks</li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[reveal.jsを使ってみる]]></title>
    <link href="http://makotow.github.io/blog/2013/08/17/presentation-using-reveal-dot-js/"/>
    <updated>2013-08-17T19:00:00+09:00</updated>
    <id>http://makotow.github.io/blog/2013/08/17/presentation-using-reveal-dot-js</id>
    <content type="html"><![CDATA[<p>社内勉強会用の資料をつくらなかやなとおもっててプレゼンツールを探してみた。</p>

<p>PPTでやるのも…だし、Keynote使おうと思ったけどMacはないしでJavaScriptで何かできないかなと思って探してみた。</p>

<p>reveal.jsを見つけたので実際に作成する前に下調べをした時のメモを公開。</p>

<!-- more -->
<h2> Contents </h2>

<ul id="markdown-toc">
  <li><a href="#revealjs">reveal.jsとは</a></li>
  <li><a href="#section">インストール</a>    <ul>
      <li><a href="#basic-setup">Basic Setup</a></li>
      <li><a href="#full-setup">Full Setup</a></li>
    </ul>
  </li>
  <li><a href="#section-1">スライドを作成する</a>    <ul>
      <li><a href="#html">HTML</a></li>
    </ul>
  </li>
</ul>

<h2 id="revealjs">reveal.jsとは</h2>
<p>HTMLでかっこいいスライドが作れるフレームワーク。
ぐいんぐいん動いてみ見た目もよい。</p>

<ul>
  <li><a href="https://github.com/hakimel/reveal.js">reveal.js</a></li>
  <li><a href="http://lab.hakim.se/reveal-js/#/">reveal.jsのデモ</a></li>
  <li><a href="https://github.com/hakimel/reveal.js/wiki/Example-Presentations">reveal.js使ったサンプル一覧</a></li>
</ul>

<h2 id="section">インストール</h2>

<h3 id="basic-setup">Basic Setup</h3>
<p>簡単な方法としては、
<a href="https://github.com/hakimel/reveal.js#basic-setup">Basic Setup</a> を参照して、<a href="https://github.com/hakimel/reveal.js/releases">https://github.com/hakimel/reveal.js/releases</a>から最新版をダウンロードしてindex.htmlを編集する。</p>

<h3 id="full-setup">Full Setup</h3>
<p>reveal.jsのフル機能を使いたい場合はこちらを使う。外部のmarkdown を取り込みたい場合などはFullSetupが必要。
<a href="https://github.com/hakimel/reveal.js#full-setup">Full Setup</a>を参照して必要なnode.js, Gruntをインストールする。
github から clone する。</p>

<pre><code>$ git clone git@github.com:hakimel/reveal.js.git
</code></pre>

<h2 id="section-1">スライドを作成する</h2>
<p>基本的にはindex.htmlを眺めているとざっくりした書き方はわかってくる。
スライドの作成方法としては次の2つがある。</p>

<ul>
  <li>HTML</li>
  <li>Markdown</li>
</ul>

<p>markdownを直接書く方法、外部ファイルのmarkdownファイルの読み込みできる。
ここではhtml, markdown の2つで、スライド作成に必要になるであろう、画像埋め込み、リストについてメモをしておく。
reveal.jsの特徴としてスライドを一次元的なものではなく2次元的にも作成できる(nested vertical slide)ものがある。</p>

<h3 id="html">HTML</h3>

<p><code>&lt;section&gt;</code> タグで一枚のスライドになる。
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;/p&gt;</span>
</span><span class='line'><span class="nt">&lt;section&gt;</span>
</span><span class='line'>    スライド１
</span><span class='line'><span class="nt">&lt;/section&gt;</span>
</span><span class='line'><span class="nt">&lt;section&gt;</span>
</span><span class='line'>    スライド２
</span><span class='line'><span class="nt">&lt;/section&gt;</span>
</span><span class='line'><span class="nt">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>nested vertical slide の作成方法としては <code>&lt;section&gt;</code> タグ内に <code>&lt;section&gt;</code> タグをネストすることで実現できる。 </p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;/p&gt;</span>
</span><span class='line'><span class="nt">&lt;section&gt;</span>
</span><span class='line'>    スライド１
</span><span class='line'>    <span class="nt">&lt;section&gt;</span>
</span><span class='line'>    スライド1-1
</span><span class='line'>    <span class="nt">&lt;/section&gt;</span>
</span><span class='line'>    <span class="nt">&lt;section&gt;</span>
</span><span class='line'>    スライド1-2
</span><span class='line'>    <span class="nt">&lt;/section&gt;</span>
</span><span class='line'><span class="nt">&lt;section&gt;</span>
</span><span class='line'><span class="nt">&lt;section&gt;</span>
</span><span class='line'>    スライド２
</span><span class='line'><span class="nt">&lt;/section&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

#### 画像、リスト
HTMLで記述する。

##### 画像
画像であれば `<img src="xxx" />`

##### リスト
`<ul><li /></ul>` を使用する。 

### Markdown 
htmlのなかにもMarkdownはかけるが、外部ファイルのMarkdownも読み込める。
スライドだけではなくて配布資料としても使いたいのでMarkdownを埋め込めるのはとてもいい機能だと思える。
ただし、外部Markdownを使うには Full Setup を実行し、grunt serve を実行する必要がある。

#### 外部のMarkdown を読み込む場合
外部ファイルとして用意したexample.mdを読み込む場合
スライドのセパレータとnested vertical slideのセパレータを設定。

- data-separator: スライドのセパレーター
- data-vertical: nested vertical slide のセパレーター

<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;section</span> <span class="na">data-markdown=</span><span class="s">&quot;example.md&quot;</span> <span class="na">data-separator=</span><span class="s">&quot;^\n\n\n&quot;</span> <span class="na">data-vertical=</span><span class="s">&quot;^\n\n&quot;</span> <span class="nt">/&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

#### HTML内にMarkdown を書く場合
以下のように記述し、section内にMarkdownで書く。


<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;section</span> <span class="na">data-markdown=</span><span class="s">&quot;&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/template&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="err">##</span> <span class="nx">Markdown</span> <span class="nx">support</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">For</span> <span class="nx">those</span> <span class="nx">of</span> <span class="nx">you</span> <span class="nx">who</span> <span class="nx">like</span> <span class="nx">that</span> <span class="nx">sort</span> <span class="nx">of</span> <span class="nx">thing</span><span class="p">.</span> <span class="nx">Instructions</span> <span class="nx">and</span> <span class="nx">a</span> <span class="nx">bit</span> <span class="nx">more</span> <span class="nx">info</span> <span class="nx">available</span> <span class="p">[</span><span class="nx">here</span><span class="p">](</span><span class="nx">https</span><span class="o">:</span><span class="c1">//github.com/hakimel/reveal.js#markdown).</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="o">&lt;</span><span class="nx">section</span> <span class="nx">data</span><span class="o">-</span><span class="nx">markdown</span><span class="o">&gt;</span>
</span><span class='line'>      <span class="err">##</span> <span class="nx">Markdown</span> <span class="nx">support</span>
</span><span class='line'>
</span><span class='line'>      <span class="nx">For</span> <span class="nx">those</span> <span class="nx">of</span> <span class="nx">you</span> <span class="nx">who</span> <span class="nx">like</span> <span class="nx">that</span> <span class="nx">sort</span> <span class="nx">of</span> <span class="nx">thing</span><span class="p">.</span>
</span><span class='line'>      <span class="nx">Instructions</span> <span class="nx">and</span> <span class="nx">a</span> <span class="nx">bit</span> <span class="nx">more</span> <span class="nx">info</span> <span class="nx">available</span> <span class="p">[</span><span class="nx">here</span><span class="p">](</span><span class="nx">https</span><span class="o">:</span><span class="c1">//github.com/hakimel/reveal.js#markdown).</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="err">/section&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;/script&gt;</span>
</span><span class='line'><span class="nt">&lt;/section&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

#### 画像、リスト
Markdownの記法で書ける。

##### 画像
`![Alt Text](path/to/img)`
ただし、画像サイズの指定ができない。指定したい場合はHTMLのimgタグを使用する。

##### リスト
以下のとおり
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>- ABC
</span><span class='line'>- DEF
</span><span class='line'>- GHI</span></code></pre></td></tr></table></div></figure></notextile></div>

## その他
画面遷移の方法、背景色の変更などはダウンロードしたディレクトリのindex.htmlをみることで理解できると思う。[^1]


## まとめ
この記事ではreveal.jsでスライドを作成する前におそらく使うであろう機能、セットアップ時のメモを紹介した。



[^1]: 記事に書いても本当にindex.htmlと同じことしか書けない…
</section></section>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ScalaでIO]]></title>
    <link href="http://makotow.github.io/blog/2013/08/04/scala-file-io/"/>
    <updated>2013-08-04T23:10:00+09:00</updated>
    <id>http://makotow.github.io/blog/2013/08/04/scala-file-io</id>
    <content type="html"><![CDATA[<h2> Contents </h2>

<ul id="markdown-toc">
  <li><a href="#scala-io">Scala でファイルIO</a></li>
  <li><a href="#api">API</a>    <ul>
      <li><a href="#section">ラインごとに処理をする</a></li>
      <li><a href="#section-1">便利メソッド</a></li>
    </ul>
  </li>
  <li><a href="#try-with-resources-">try-with-resources は？</a></li>
  <li><a href="#section-2">次のお題</a></li>
</ul>

<h2 id="scala-io">Scala でファイルIO</h2>
<p>Scalaを書き始めたばかり(2009?2010?くらい)の頃はSourceイケてないよって情報ばかりだった。
今ならどのような方法があるかしらべてみた</p>

<!-- more -->

<h2 id="api">API</h2>

<p>ぱっと思いつく所で以下の２つ。</p>

<ul>
  <li>Scala の scala.io.Source</li>
  <li>Java の java.nio(nio2), java.io</li>
</ul>

<p>今回はScalaなので<a href="http://www.scala-lang.org/api/current/index.html#scala.io.Source">scala.io.Source</a>(<a href="https://github.com/scala/scala/blob/v2.10.2/src/library/scala/io/Source.scala#L1">ソース</a>)を使ってみる。<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup></p>

<pre><code>scala-version: scala 2.10.2
</code></pre>

<h3 id="section">ラインごとに処理をする</h3>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="c1">// ファイルから一行づつ読み込み処理をするサンプル</span>
</span><span class='line'><span class="k">val</span> <span class="n">s</span> <span class="k">=</span> <span class="nc">Source</span><span class="o">.</span><span class="n">fromFile</span><span class="o">(</span><span class="n">file</span><span class="o">)</span>                                                    <span class="o">&lt;</span><span class="n">br</span> <span class="o">/&gt;</span>
</span><span class='line'><span class="k">try</span> <span class="o">{</span>                                                                            <span class="o">&lt;</span><span class="n">br</span> <span class="o">/&gt;</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">getLines</span><span class="o">()</span> <span class="n">foreach</span> <span class="o">{</span> <span class="n">e</span> <span class="o">=&amp;</span><span class="n">gt</span><span class="o">;</span>                                            <span class="o">&lt;</span><span class="n">br</span> <span class="o">/&gt;</span>
</span><span class='line'>    <span class="c1">// doSomething</span>
</span><span class='line'>  <span class="o">}</span>                                                                           <span class="o">&lt;</span><span class="n">br</span> <span class="o">/&gt;</span>
</span><span class='line'><span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>                                                                      <span class="o">&lt;</span><span class="n">br</span> <span class="o">/&gt;</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">close</span><span class="o">()</span>                                                                      <span class="o">&lt;</span><span class="n">br</span> <span class="o">/&gt;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3 id="section-1">便利メソッド</h3>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">val</span> <span class="n">s</span> <span class="k">=</span> <span class="nc">Source</span><span class="o">.</span><span class="n">fromFile</span><span class="o">(</span><span class="n">file</span><span class="o">)</span>                                                    <span class="o">&lt;</span><span class="n">br</span> <span class="o">/&gt;</span>
</span><span class='line'><span class="k">try</span> <span class="o">{</span>                                                                            <span class="o">&lt;</span><span class="n">br</span> <span class="o">/&gt;</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">getLines</span><span class="o">().</span><span class="n">take</span><span class="o">(</span><span class="mi">5</span><span class="o">)</span> <span class="n">foreach</span> <span class="o">{</span> <span class="n">e</span> <span class="o">=&amp;</span><span class="n">gt</span><span class="o">;</span>                                            <span class="o">&lt;</span><span class="n">br</span> <span class="o">/&gt;</span>
</span><span class='line'>     <span class="c1">// 先頭5行のみ処理</span>
</span><span class='line'>     <span class="c1">// do something</span>
</span><span class='line'>  <span class="o">}</span>                                                                           <span class="o">&lt;</span><span class="n">br</span> <span class="o">/&gt;</span>
</span><span class='line'><span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>                                                                      <span class="o">&lt;</span><span class="n">br</span> <span class="o">/&gt;</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">close</span><span class="o">()</span>                                                                      <span class="o">&lt;</span><span class="n">br</span> <span class="o">/&gt;</span>
</span><span class='line'><span class="o">}</span>      <span class="o">&lt;</span><span class="n">br</span> <span class="o">/&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">val</span> <span class="n">s</span> <span class="k">=</span> <span class="nc">Source</span><span class="o">.</span><span class="n">fromFile</span><span class="o">(</span><span class="n">file</span><span class="o">)</span>                                                    <span class="o">&lt;</span><span class="n">br</span> <span class="o">/&gt;</span>
</span><span class='line'><span class="k">try</span> <span class="o">{</span>                                                                            <span class="o">&lt;</span><span class="n">br</span> <span class="o">/&gt;</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">getLines</span><span class="o">().</span><span class="n">drop</span><span class="o">(</span><span class="mi">1</span><span class="o">)</span> <span class="n">foreach</span> <span class="o">{</span> <span class="n">e</span> <span class="o">=&amp;</span><span class="n">gt</span><span class="o">;</span>                                            <span class="o">&lt;</span><span class="n">br</span> <span class="o">/&gt;</span>
</span><span class='line'>     <span class="c1">// 先頭行を読み捨てて drop(1)</span>
</span><span class='line'>     <span class="c1">// 以降をループする。</span>
</span><span class='line'>     <span class="c1">// do something</span>
</span><span class='line'>  <span class="o">}</span>                                                                           <span class="o">&lt;</span><span class="n">br</span> <span class="o">/&gt;</span>
</span><span class='line'><span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>                                                                      <span class="o">&lt;</span><span class="n">br</span> <span class="o">/&gt;</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">close</span><span class="o">()</span>                                                                      <span class="o">&lt;</span><span class="n">br</span> <span class="o">/&gt;</span>
</span><span class='line'><span class="o">}</span>      <span class="o">&lt;</span><span class="n">br</span> <span class="o">/&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>一行読み捨てとか綺麗に書ける印象。
getLinesでは<a href="http://www.scala-lang.org/api/current/index.html#scala.collection.Iterator">scala.collection.Iterator</a>(<a href="https://github.com/scala/scala/blob/v2.10.2/src/library/scala/collection/Iterator.scala#L1">ソース</a>)が返ってくるので、便利メソッドがたくさん使える。
APIを眺めているともっと綺麗にできそう。</p>

<h2 id="try-with-resources-">try-with-resources は？</h2>

<p>リソースの解放でJava7のtry-with-resourceみたいなことするにはどうしたらいいか。
Java7でできるからScalaでもと思ったけど言語仕様ではできないようだ。
やはりローンパターンを使用するみたい。
少し調べてみるとScalazのwithResource, scala-armなどがあるようだ。</p>

<p><a href="http://www.ne.jp/asahi/hishidama/home/index.html">ひしだま’s ホームページ</a>にいろいろなローンパターンがまとめられている。</p>

<ul>
  <li><a href="http://www.ne.jp/asahi/hishidama/home/tech/scala/sample/using.html">Scala using（ローンパターン)</a></li>
</ul>

<h2 id="section-2">次のお題</h2>

<p>今後派生するとしたらこんな感じ</p>

<ul>
  <li>ローンパターン、派生してScalaを通してのデザインパターン再考</li>
  <li>Scalaz, scala-arm を使用したローンパターン実装方法</li>
</ul>

<p><br /><br /></p>

<div class="footnotes">
  <ol>
    <li id="fn:1">
      <p>ソースがAPIからリンク貼られててすごく便利。<a href="#fnref:1" rel="reference">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[IntelliJ で ScalaTest]]></title>
    <link href="http://makotow.github.io/blog/2013/07/18/scala-intellij-idea-scalatest/"/>
    <updated>2013-07-18T00:10:00+09:00</updated>
    <id>http://makotow.github.io/blog/2013/07/18/scala-intellij-idea-scalatest</id>
    <content type="html"><![CDATA[<h2> Contents </h2>

<ul id="markdown-toc">
  <li><a href="#section">概要</a></li>
  <li><a href="#sample-code">Sample Code</a>    <ul>
      <li><a href="#vec-trait">Vec trait</a></li>
      <li><a href="#vectest">VecTest</a></li>
    </ul>
  </li>
  <li><a href="#intellij-">IntelliJ からテスト実行</a></li>
</ul>

<h2 id="section">概要</h2>
<p><a href="/blog/2013/07/01/sbt-intellij-idea/">sbt で IntelliJのプロジェクトを作成</a> <br />
<a href="/blog/2013/07/03/sbt-intellij-idea-add-librarydependencies/">sbt で IntelliJのプロジェクトを作成(依存ライブラリ追加編)</a> </p>

<p>の続きでIntelliJプロジェクトにScalaTestを追加したのでテストを書いてIntelliJのsbtconsoleからコンパイル、実行、テストをやってみる。</p>

<p>書いている現在の各バージョン</p>

<ul>
  <li>IntelliJ 12</li>
  <li>Scala 2.10.2</li>
  <li>ScalaTest 1.9.1</li>
</ul>

<!-- more -->

<h2 id="sample-code">Sample Code</h2>

<h3 id="vec-trait">Vec trait</h3>

<p>ベクトルの計算をする小さなプログラムを作った。
内積とnormを求める機能。<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Vec </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">trait</span> <span class="nc">Vec</span> <span class="o">{</span>      <span class="o">&lt;</span><span class="n">br</span> <span class="o">/&gt;</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">dot</span><span class="o">(</span><span class="n">a</span><span class="k">:</span> <span class="kt">List</span><span class="o">[</span><span class="kt">Double</span><span class="o">],</span> <span class="n">b</span><span class="k">:</span> <span class="kt">List</span><span class="o">[</span><span class="kt">Double</span><span class="o">])</span> <span class="k">=</span> <span class="o">((</span><span class="n">a</span> <span class="n">zip</span> <span class="n">b</span><span class="o">).</span><span class="n">map</span> <span class="o">{</span><span class="k">case</span> <span class="o">(</span><span class="n">x</span><span class="o">,</span> <span class="n">y</span><span class="o">)</span> <span class="o">=&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="n">x</span> <span class="o">*</span> <span class="n">y</span> <span class="o">}</span> <span class="o">:\</span> <span class="mf">0.0</span> <span class="o">)</span> <span class="o">{</span> <span class="k">_</span> <span class="o">+</span> <span class="k">_</span> <span class="o">}&lt;</span><span class="n">br</span> <span class="o">/&gt;</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">norm</span><span class="o">(</span><span class="n">l</span><span class="k">:</span> <span class="kt">List</span><span class="o">[</span><span class="kt">Double</span><span class="o">])</span> <span class="k">=</span> <span class="nc">Math</span><span class="o">.</span><span class="n">sqrt</span><span class="o">((</span><span class="mf">0.0</span> <span class="o">/:</span> <span class="n">l</span><span class="o">.</span><span class="n">map</span><span class="o">(</span><span class="n">x</span> <span class="o">=&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="n">x</span> <span class="o">*</span> <span class="n">x</span><span class="o">))</span> <span class="o">{</span><span class="k">_</span> <span class="o">+</span> <span class="k">_</span><span class="o">})</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3 id="vectest">VecTest</h3>

<p>ScalaTestの使い方は本家を参照</p>

<ul>
  <li><a href="http://www.scalatest.org/" title="ScalaTest本家">ScalaTest</a></li>
</ul>

<p>以下、本家より引用
&gt; ScalaTest supports three main styles of testing out of the box. If you don’t have a preference, start with FunSuite:</p>

<blockquote>
  <p>For test-driven development (TDD) start with FunSuite <br />
For behavior-driven development (BDD), start with FunSpec<br />
For functional, integration, or acceptance testing, start with FeatureSpec<br /></p>
</blockquote>

<p>主に３つのテストの書き方ができる
今回は慣れているJUnit風の書き方。</p>

<p>JUnitのコードを見たことがあればソースから理解できると思う。<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>VecTest </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">import</span> <span class="nn">org.scalatest._&lt;/p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">class</span> <span class="nc">VecTest</span> <span class="k">extends</span> <span class="nc">FunSuite</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">test</span><span class="o">(</span><span class="err">“</span><span class="n">dot</span> <span class="n">product</span><span class="err">”</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="n">v1</span> <span class="k">=</span> <span class="nc">List</span><span class="o">(</span><span class="mf">1.0</span><span class="o">,</span> <span class="mf">3.0</span><span class="o">,</span> <span class="o">-</span><span class="mf">5.0</span><span class="o">)</span>
</span><span class='line'>    <span class="k">val</span> <span class="n">v2</span> <span class="k">=</span> <span class="nc">List</span><span class="o">(</span><span class="mf">4.0</span><span class="o">,</span> <span class="o">-</span><span class="mf">2.0</span><span class="o">,</span> <span class="o">-</span><span class="mf">1.0</span><span class="o">)</span>
</span><span class='line'>    <span class="k">val</span> <span class="n">vec</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">Vec</span><span class="o">{}</span>
</span><span class='line'>    <span class="n">assert</span><span class="o">(</span><span class="mi">3</span> <span class="o">===</span> <span class="n">vec</span><span class="o">.</span><span class="n">dot</span><span class="o">(</span><span class="n">v1</span> <span class="o">,</span><span class="n">v2</span><span class="o">))</span>
</span><span class='line'>  <span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">test</span><span class="o">(</span><span class="err">“</span><span class="n">norm</span><span class="err">”</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="n">v1</span> <span class="k">=</span> <span class="nc">List</span><span class="o">(</span><span class="mf">1.0</span><span class="o">,</span> <span class="mf">3.0</span><span class="o">,</span> <span class="o">-</span><span class="mf">5.0</span><span class="o">)</span>
</span><span class='line'>    <span class="k">val</span> <span class="n">vec</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">Vec</span><span class="o">{}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">assert</span><span class="o">(</span><span class="nc">Math</span><span class="o">.</span><span class="n">sqrt</span><span class="o">(</span><span class="mi">35</span><span class="o">)</span> <span class="o">===</span> <span class="n">vec</span><span class="o">.</span><span class="n">norm</span><span class="o">(</span><span class="n">v1</span><span class="o">))</span>   <span class="o">}</span> <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
</code></pre>

<h2 id="intellij-">IntelliJ からテスト実行</h2>
<p>今回はIntelliJ のプラグインである SBT Consoleを使用する。
コンソールからsbtを実行するのと同じ。</p>

<ol>
  <li>SBT Consoleからsbt起動 
<img src="/images/2013/07/ScalaTest.png"></li>
  <li>コマンド入力エリアへsbtコマンドを入力し実行
<img src="/images/2013/07/ScalaTest-sbtcmd.png"></li>
  <li>テスト実行後、結果出力
<img src="/images/2013/07/ScalaTest-testresult.png"></li>
</ol>

<p>上記の例では ~test でやっているがもちろん、run, test, compielなども実行可能。
## 雑感
SBT Console使うことでIntelliJ内で完結するのは便利だと思う。</p>

<p>もう少しネタ見つけて続ける。(コード片とか学んだこととか…)</p>

<div class="footnotes">
  <ol>
    <li id="fn:1">
      <p>trait にしたのはなんとなく使ってみたいから…。object にすべきか traitにすべきかの判断はScala力が不足していてピンとこないので、とりあえずどのようなにつかえるかを試している最中。<a href="#fnref:1" rel="reference">&#8617;</a></p>
    </li>
    <li id="fn:2">
      <p>dot productのコードは本当は v1 dot v2 とか書きたい。Scala力が不足…<a href="#fnref:2" rel="reference">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
  </entry>
  
</feed>
