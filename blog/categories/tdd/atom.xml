<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: TDD | Faster and Faster]]></title>
  <link href="http://makotow.github.io/blog/categories/tdd/atom.xml" rel="self"/>
  <link href="http://makotow.github.io/"/>
  <updated>2014-12-07T01:51:43+09:00</updated>
  <id>http://makotow.github.io/</id>
  <author>
    <name><![CDATA[Makoto WATANABE (makotow)]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[IntelliJ で ScalaTest]]></title>
    <link href="http://makotow.github.io/blog/2013/07/18/scala-intellij-idea-scalatest/"/>
    <updated>2013-07-18T00:10:00+09:00</updated>
    <id>http://makotow.github.io/blog/2013/07/18/scala-intellij-idea-scalatest</id>
    <content type="html"><![CDATA[<h2> Contents </h2>

<ul id="markdown-toc">
  <li><a href="#section">概要</a></li>
  <li><a href="#sample-code">Sample Code</a>    <ul>
      <li><a href="#vec-trait">Vec trait</a></li>
      <li><a href="#vectest">VecTest</a></li>
    </ul>
  </li>
  <li><a href="#intellij-">IntelliJ からテスト実行</a></li>
</ul>

<h2 id="section">概要</h2>
<p><a href="/blog/2013/07/01/sbt-intellij-idea/">sbt で IntelliJのプロジェクトを作成</a> <br />
<a href="/blog/2013/07/03/sbt-intellij-idea-add-librarydependencies/">sbt で IntelliJのプロジェクトを作成(依存ライブラリ追加編)</a> </p>

<p>の続きでIntelliJプロジェクトにScalaTestを追加したのでテストを書いてIntelliJのsbtconsoleからコンパイル、実行、テストをやってみる。</p>

<p>書いている現在の各バージョン</p>

<ul>
  <li>IntelliJ 12</li>
  <li>Scala 2.10.2</li>
  <li>ScalaTest 1.9.1</li>
</ul>

<!-- more -->

<h2 id="sample-code">Sample Code</h2>

<h3 id="vec-trait">Vec trait</h3>

<p>ベクトルの計算をする小さなプログラムを作った。
内積とnormを求める機能。<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Vec </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">trait</span> <span class="nc">Vec</span> <span class="o">{</span>      <span class="o">&lt;</span><span class="n">br</span> <span class="o">/&gt;</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">dot</span><span class="o">(</span><span class="n">a</span><span class="k">:</span> <span class="kt">List</span><span class="o">[</span><span class="kt">Double</span><span class="o">],</span> <span class="n">b</span><span class="k">:</span> <span class="kt">List</span><span class="o">[</span><span class="kt">Double</span><span class="o">])</span> <span class="k">=</span> <span class="o">((</span><span class="n">a</span> <span class="n">zip</span> <span class="n">b</span><span class="o">).</span><span class="n">map</span> <span class="o">{</span><span class="k">case</span> <span class="o">(</span><span class="n">x</span><span class="o">,</span> <span class="n">y</span><span class="o">)</span> <span class="o">=&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="n">x</span> <span class="o">*</span> <span class="n">y</span> <span class="o">}</span> <span class="o">:\</span> <span class="mf">0.0</span> <span class="o">)</span> <span class="o">{</span> <span class="k">_</span> <span class="o">+</span> <span class="k">_</span> <span class="o">}&lt;</span><span class="n">br</span> <span class="o">/&gt;</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">norm</span><span class="o">(</span><span class="n">l</span><span class="k">:</span> <span class="kt">List</span><span class="o">[</span><span class="kt">Double</span><span class="o">])</span> <span class="k">=</span> <span class="nc">Math</span><span class="o">.</span><span class="n">sqrt</span><span class="o">((</span><span class="mf">0.0</span> <span class="o">/:</span> <span class="n">l</span><span class="o">.</span><span class="n">map</span><span class="o">(</span><span class="n">x</span> <span class="o">=&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="n">x</span> <span class="o">*</span> <span class="n">x</span><span class="o">))</span> <span class="o">{</span><span class="k">_</span> <span class="o">+</span> <span class="k">_</span><span class="o">})</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3 id="vectest">VecTest</h3>

<p>ScalaTestの使い方は本家を参照</p>

<ul>
  <li><a href="http://www.scalatest.org/" title="ScalaTest本家">ScalaTest</a></li>
</ul>

<p>以下、本家より引用
&gt; ScalaTest supports three main styles of testing out of the box. If you don’t have a preference, start with FunSuite:</p>

<blockquote>
  <p>For test-driven development (TDD) start with FunSuite <br />
For behavior-driven development (BDD), start with FunSpec<br />
For functional, integration, or acceptance testing, start with FeatureSpec<br /></p>
</blockquote>

<p>主に３つのテストの書き方ができる
今回は慣れているJUnit風の書き方。</p>

<p>JUnitのコードを見たことがあればソースから理解できると思う。<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>VecTest </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">import</span> <span class="nn">org.scalatest._&lt;/p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">class</span> <span class="nc">VecTest</span> <span class="k">extends</span> <span class="nc">FunSuite</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">test</span><span class="o">(</span><span class="err">“</span><span class="n">dot</span> <span class="n">product</span><span class="err">”</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="n">v1</span> <span class="k">=</span> <span class="nc">List</span><span class="o">(</span><span class="mf">1.0</span><span class="o">,</span> <span class="mf">3.0</span><span class="o">,</span> <span class="o">-</span><span class="mf">5.0</span><span class="o">)</span>
</span><span class='line'>    <span class="k">val</span> <span class="n">v2</span> <span class="k">=</span> <span class="nc">List</span><span class="o">(</span><span class="mf">4.0</span><span class="o">,</span> <span class="o">-</span><span class="mf">2.0</span><span class="o">,</span> <span class="o">-</span><span class="mf">1.0</span><span class="o">)</span>
</span><span class='line'>    <span class="k">val</span> <span class="n">vec</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">Vec</span><span class="o">{}</span>
</span><span class='line'>    <span class="n">assert</span><span class="o">(</span><span class="mi">3</span> <span class="o">===</span> <span class="n">vec</span><span class="o">.</span><span class="n">dot</span><span class="o">(</span><span class="n">v1</span> <span class="o">,</span><span class="n">v2</span><span class="o">))</span>
</span><span class='line'>  <span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">test</span><span class="o">(</span><span class="err">“</span><span class="n">norm</span><span class="err">”</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="n">v1</span> <span class="k">=</span> <span class="nc">List</span><span class="o">(</span><span class="mf">1.0</span><span class="o">,</span> <span class="mf">3.0</span><span class="o">,</span> <span class="o">-</span><span class="mf">5.0</span><span class="o">)</span>
</span><span class='line'>    <span class="k">val</span> <span class="n">vec</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">Vec</span><span class="o">{}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">assert</span><span class="o">(</span><span class="nc">Math</span><span class="o">.</span><span class="n">sqrt</span><span class="o">(</span><span class="mi">35</span><span class="o">)</span> <span class="o">===</span> <span class="n">vec</span><span class="o">.</span><span class="n">norm</span><span class="o">(</span><span class="n">v1</span><span class="o">))</span>   <span class="o">}</span> <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
</code></pre>

<h2 id="intellij-">IntelliJ からテスト実行</h2>
<p>今回はIntelliJ のプラグインである SBT Consoleを使用する。
コンソールからsbtを実行するのと同じ。</p>

<ol>
  <li>SBT Consoleからsbt起動 
<img src="/images/2013/07/ScalaTest.png"></li>
  <li>コマンド入力エリアへsbtコマンドを入力し実行
<img src="/images/2013/07/ScalaTest-sbtcmd.png"></li>
  <li>テスト実行後、結果出力
<img src="/images/2013/07/ScalaTest-testresult.png"></li>
</ol>

<p>上記の例では ~test でやっているがもちろん、run, test, compielなども実行可能。
## 雑感
SBT Console使うことでIntelliJ内で完結するのは便利だと思う。</p>

<p>もう少しネタ見つけて続ける。(コード片とか学んだこととか…)</p>

<div class="footnotes">
  <ol>
    <li id="fn:1">
      <p>trait にしたのはなんとなく使ってみたいから…。object にすべきか traitにすべきかの判断はScala力が不足していてピンとこないので、とりあえずどのようなにつかえるかを試している最中。<a href="#fnref:1" rel="reference">&#8617;</a></p>
    </li>
    <li id="fn:2">
      <p>dot productのコードは本当は v1 dot v2 とか書きたい。Scala力が不足…<a href="#fnref:2" rel="reference">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[実践テスト駆動開発　読書録]]></title>
    <link href="http://makotow.github.io/blog/2013/03/30/tddprac/"/>
    <updated>2013-03-30T13:30:00+09:00</updated>
    <id>http://makotow.github.io/blog/2013/03/30/tddprac</id>
    <content type="html"><![CDATA[<div class="amazlet-box" style="margin-bottom:0px;"><div class="amazlet-image" style="float:left;margin:0px 12px 1px 0px;"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798124583/makotownotes-22/ref=nosim/" name="amazletlink" target="_blank"><img src="http://ecx.images-amazon.com/images/I/61vSRgWto0L._SL160_.jpg" alt="実践テスト駆動開発 テストに導かれてオブジェクト指向ソフトウェアを育てる (Object Oriented SELECTION)" style="border: none;" /></a></div><div class="amazlet-info" style="line-height:120%; margin-bottom: 10px"><div class="amazlet-name" style="margin-bottom:10px;line-height:120%"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798124583/makotownotes-22/ref=nosim/" name="amazletlink" target="_blank">実践テスト駆動開発 テストに導かれてオブジェクト指向ソフトウェアを育てる (Object Oriented SELECTION)</a><div class="amazlet-powered-date" style="font-size:80%;margin-top:5px;line-height:120%">posted with <a href="http://www.amazlet.com/" title="amazlet" target="_blank">amazlet</a> at 13.02.18</div></div><div class="amazlet-detail">Steve Freeman Nat Pryce <br />翔泳社 <br />売り上げランキング: 39,893<br /></div><div class="amazlet-sub-info" style="float: left;"><div class="amazlet-link" style="margin-top: 5px"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798124583/makotownotes-22/ref=nosim/" name="amazletlink" target="_blank">Amazon.co.jpで詳細を見る</a></div></div></div><div class="amazlet-footer" style="clear: left"></div></div>

<p>軽いメモ書き。
個人的に結構なボリュームがある書籍であった。</p>

<!-- more -->

<h3 id="section">感想</h3>

<p>読んでから少したってしまったので箇条書きで感想。</p>

<ul>
  <li>1章が一番しっくりきた。</li>
  <li>テストコードをどうコーディングするかをかなり多くのサンプルをみながら理解できた。</li>
  <li>モックオブジェクト(jMock2)について理解を深めることができた。</li>
  <li>同期処理、非同期処理についても言及しているため、非同期処理のテストについて学びたく買ったので良かった。</li>
</ul>

<p>実際、設計を進化させながら進んでいる。
  途中でこれは微妙だなと思うことがあっても章が進むと改善されていくので、自分の設計思想と同じだなと思ったり、
  こういうやり方があるかなどと読み進めていけて面白かった。</p>

<p>この書籍自体にはテスティングフレームワークの使用方法などは載っていないが、
  書籍内で使用しているテスティングフレームワークについてはAppendixとして説明がついている。
  なにを使ったらよいかの参考になるのではないか。</p>

<h3 id="section-1">参考</h3>

<p>テスト駆動開発といえばこれ。
併せて読むと理解が進むと思う。</p>

<div class="amazlet-box" style="margin-bottom:0px;"><div class="amazlet-image" style="float:left;margin:0px 12px 1px 0px;"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4894717115/makotownotes-22/ref=nosim/" name="amazletlink" target="_blank"><img src="http://ecx.images-amazon.com/images/I/51G6YEDVRKL._SL160_.jpg" alt="テスト駆動開発入門" style="border: none;" /></a></div><div class="amazlet-info" style="line-height:120%; margin-bottom: 10px"><div class="amazlet-name" style="margin-bottom:10px;line-height:120%"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4894717115/makotownotes-22/ref=nosim/" name="amazletlink" target="_blank">テスト駆動開発入門</a><div class="amazlet-powered-date" style="font-size:80%;margin-top:5px;line-height:120%">posted with <a href="http://www.amazlet.com/" title="amazlet" target="_blank">amazlet</a> at 13.03.30</div></div><div class="amazlet-detail">ケント ベック <br />ピアソンエデュケーション <br />売り上げランキング: 105,111<br /></div><div class="amazlet-sub-info" style="float: left;"><div class="amazlet-link" style="margin-top: 5px"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4894717115/makotownotes-22/ref=nosim/" name="amazletlink" target="_blank">Amazon.co.jpで詳細を見る</a></div></div></div><div class="amazlet-footer" style="clear: left"></div></div>

]]></content>
  </entry>
  
</feed>
